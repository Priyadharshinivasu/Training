--DAY 1--

SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENT;
SELECT ID,
       NAME,
       CASE
         WHEN ID = 7202 THEN
          7103
         ELSE
          ID
       END AS UPDATED_ID
  FROM EMPLOYEES;
SELECT ID, NAME, DECODE(ID, 7101, 7005, ID) AS UPDATED_ID FROM EMPLOYEES;
SELECT E.ID, E.NAME, D.DEPTNAME, D.LOCATION
  FROM EMPLOYEES E, DEPARTMENT D
 WHERE E.DEPTID = D.DEPTID;
SELECT E.ID, E.NAME, D.DEPTNAME
  FROM EMPLOYEES E, DEPARTMENT D
 WHERE E.DEPTID = D.DEPTID(+);
SELECT NAME
  FROM EMPLOYEES
 WHERE DEPTID IN (SELECT DEPTID FROM DEPARTMENT WHERE DEPTNAME = 'Testing');
SELECT * FROM EMPLOYEES;


DECLARE
  GREET VARCHAR2(10) := 'HII ALL';
BEGIN
  DBMS_OUTPUT.PUT_LINE(GREET);
END;
DECLARE
  NUM1 NUMBER(5) := 55;
  NUM2 NUMBER(5) := 45;
BEGIN
  DBMS_OUTPUT.PUT_LINE(NUM1 + NUM2);
END;

--DAY 2--

DECLARE
  E_ID   EMPLOYEES.ID%TYPE;
  E_NAME EMPLOYEES.NAME%TYPE;
  CURSOR EMP_DETAILS IS
    SELECT ID, NAME FROM EMPLOYEES;
BEGIN
  OPEN EMP_DETAILS;
  LOOP
    FETCH EMP_DETAILS
      INTO E_ID, E_NAME;
    EXIT WHEN EMP_DETAILS%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID : ' || E_ID || '  ' || 'NAME : ' || E_NAME);
  END LOOP;
  CLOSE EMP_DETAILS;
END;

--DAY 3--

SELECT * FROM EMPLOYEES;

DECLARE
  NUM1 NUMBER := 10;
  NUM2 NUMBER := 20;
BEGIN
  DBMS_OUTPUT.PUT_LINE(NUM1 + NUM2);
END;

DECLARE
  E_ID   EMPLOYEES.ID%TYPE;
  E_NAME EMPLOYEES.NAME%TYPE;
  CURSOR C_EMPLOYEES IS
    SELECT ID, NAME FROM EMPLOYEES;
BEGIN
  OPEN C_EMPLOYEES;
  LOOP
    FETCH C_EMPLOYEES
      INTO E_ID, E_NAME;
    EXIT WHEN C_EMPLOYEES%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: ' || E_ID || ' ' || 'NAME: ' || E_NAME);
  END LOOP;
  CLOSE C_EMPLOYEES;
END;

SELECT NAME, DEPTNAME
  FROM EMPLOYEES E, DEPARTMENT D
 WHERE E.DEPTID = D.DEPTID;

--DAY 4--

--FETCH THE MIDDLE RECORD--

DECLARE
  V_TOTAL NUMBER;
  V_MID   NUMBER;

BEGIN
  SELECT COUNT(*) INTO V_TOTAL FROM EMPLOYEES;

  IF MOD(V_TOTAL, 2) = 0 THEN
    V_MID := V_TOTAL / 2;
  ELSE
    V_MID := V_TOTAL / 2 + 1;
  END IF;

  FOR I IN (SELECT *
              FROM (SELECT EMPLOYEES.*,
                           ROW_NUMBER() OVER(ORDER BY ID) AS ROW_NUM
                      FROM EMPLOYEES)
             WHERE ROW_NUM = V_MID) LOOP
    DBMS_OUTPUT.PUT_LINE('MIDDLE RECORD : ' || I.NAME);
  END LOOP;

END;

--FETCH EVEN RECORDS--

BEGIN
  FOR I IN (SELECT *
              FROM (SELECT EMPLOYEES.*,
                           ROW_NUMBER() OVER(ORDER BY ID) AS ROW_NUM
                      FROM EMPLOYEES)
             WHERE MOD(ROW_NUM, 2) = 0) LOOP
    DBMS_OUTPUT.PUT_LINE('EVEN RECORDS: ' || I.NAME);
  END LOOP;
END;

--FETCH THE LAST RECORD--

DECLARE
  V_TOT NUMBER;

BEGIN
  SELECT COUNT(*) INTO V_TOT FROM EMPLOYEES;

  FOR I IN (SELECT *
              FROM (SELECT EMPLOYEES.*,
                           ROW_NUMBER() OVER(ORDER BY ID) AS ROW_NUM
                      FROM EMPLOYEES)
             WHERE V_TOT = ROW_NUM) LOOP
    DBMS_OUTPUT.PUT_LINE('LAST RECORD: ' || I.NAME);
  END LOOP;

END;

--FETCH THE MAX SALARY--

DECLARE
  V_RES NUMBER;

BEGIN
  SELECT COUNT(*) INTO V_RES FROM EMPLOYEES;
  V_RES := V_RES - 1;

  FOR I IN (SELECT *
              FROM (SELECT EMPLOYEES.*,
                           ROW_NUMBER() OVER(ORDER BY SALARY) AS ROW_NUM
                      FROM EMPLOYEES)
             WHERE V_RES = ROW_NUM) LOOP
    DBMS_OUTPUT.PUT_LINE('NAME: ' || I.NAME || ' , ' ||
                         'MAXIMUM SALARY : ' || I.SALARY);
  END LOOP;

END;

--ANOTHER WAY TO FETCH MAX SALARY--

DECLARE
  V_RES NUMBER;

BEGIN
  SELECT MAX(SALARY) INTO V_RES FROM EMPLOYEES;

  FOR I IN (SELECT *
              FROM (SELECT * FROM EMPLOYEES ORDER BY SALARY DESC)
             WHERE V_RES = SALARY) LOOP
    DBMS_OUTPUT.PUT_LINE('NAME: ' || I.NAME || ' , ' ||
                         'MAXIMUM SALARY : ' || I.SALARY);
  END LOOP;

END;

--DAY 5--

--LOOPS--

DECLARE
  NUM1 NUMBER := 3;
  NUM2 NUMBER := 3;

BEGIN

  FOR I IN 1 .. NUM1 LOOP
    FOR J IN 1 .. NUM2 LOOP
      DBMS_OUTPUT.PUT_LINE(I || J);
    END LOOP;
  END LOOP;

END;

--PROCEDURE--

CREATE OR REPLACE PROCEDURE SAMPLE IS
  NUM1 NUMBER := 3;
  NUM2 NUMBER := 3;

BEGIN

  DBMS_OUTPUT.PUT_LINE('PL/SQL PROCEDURES');
  FOR I IN 1 .. NUM1 LOOP
    FOR J IN 1 .. NUM2 LOOP
      DBMS_OUTPUT.PUT_LINE(I || ' ' || J);
    END LOOP;
  END LOOP;

END SAMPLE;
/

BEGIN
SAMPLE;
END;
/

DROP PROCEDURE SAMPLE;

CREATE OR REPLACE PROCEDURE ZOMATO IS
  ITEM  VARCHAR2(20) := 'CHICKEN BRIYANI';
  HOTEL VARCHAR2(20) := 'BRIYANI BROTHERS';
  PRICE NUMBER := 300;

BEGIN
  DBMS_OUTPUT.PUT_LINE('HOTEL: ' || HOTEL);
  DBMS_OUTPUT.PUT_LINE('ITEM: ' || ITEM);
  DBMS_OUTPUT.PUT_LINE('PRICE: ' || PRICE);
END ZOMATO;
/

BEGIN
  ZOMATO;
END;
/ 
DROP PROCEDURE ZOMATO;

--EXCEPTION--

DECLARE 
   C_ID EMPLOYEES.ID%TYPE:=1; 
   C_NAME EMPLOYEES.NAME%TYPE; 
BEGIN 
   SELECT  ID, NAME INTO  C_ID, C_NAME 
   FROM EMPLOYEES 
   WHERE ID = C_ID;  
   DBMS_OUTPUT.PUT_LINE ('ID: '||  C_ID); 
   DBMS_OUTPUT.PUT_LINE ('NAME: ' || C_NAME); 

EXCEPTION 
   WHEN NO_DATA_FOUND THEN 
      DBMS_OUTPUT.PUT_LINE('NO SUCH EMPLOYEES!'); 
   WHEN others THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR!'); 
END; 
/

--EXCEPTION HANDLING USING PROCEDURE--

CREATE OR REPLACE PROCEDURE EMPLOYEES_PROCEDURE IS  
   C_ID EMPLOYEES.ID%TYPE:=1; 
   C_NAME EMPLOYEES.NAME%TYPE; 
BEGIN 
   SELECT  ID, NAME INTO  C_ID, C_NAME 
   FROM EMPLOYEES 
   WHERE ID = C_ID;  
   DBMS_OUTPUT.PUT_LINE ('ID: '||  C_ID); 
   DBMS_OUTPUT.PUT_LINE ('NAME: ' || C_NAME); 

EXCEPTION 
   WHEN NO_DATA_FOUND THEN 
      DBMS_OUTPUT.PUT_LINE('NO SUCH EMPLOYEES!'); 
   WHEN others THEN 
      DBMS_OUTPUT.PUT_LINE('ERROR!'); 
END EMPLOYEES_PROCEDURE; 
/

BEGIN
EMPLOYEES_PROCEDURE;
END;
/

--IMPLICIT CURSOR--

CREATE OR REPLACE PROCEDURE EMP_IMP_CUR IS
BEGIN
  FOR I IN (SELECT * FROM EMPLOYEES) LOOP
    DBMS_OUTPUT.PUT_LINE('ID: ' || I.ID || ' ' || 'NAME: ' || I.NAME);
  END LOOP;
END;
/

BEGIN
  EMP_IMP_CUR;
END;
/

--EXPLICIT CURSOR--

CREATE OR REPLACE PROCEDURE EMP_EXP_CUR IS
  C_ID   EMPLOYEES.ID%TYPE;
  C_NAME EMPLOYEES.NAME%TYPE;
  CURSOR C_EMP IS
    SELECT ID, NAME FROM EMPLOYESS;
BEGIN
  OPEN C_EMP;
  LOOP
    FETCH C_EMP
      INTO C_ID, C_NAME;
    EXIT WHEN C_EMP%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: ' || C_ID || 'NAME: ' || ' ' || C_NAME);
  END LOOP;
  CLOSE C_EMP;
END;
/
S
BEGIN
EMP_EXP_CUR;
END;
/


